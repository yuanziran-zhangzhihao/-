首先第一部分，就是同一起跑线的数据库查询
这里包含了数据查询的所有考核所有最基本的一元结构，并简单拓展了二元结构。              最后有彩蛋

阐述模式是                    
等级xxx,阐述
进一步解释，xxx
模版：
xxxxx
xxxxxx
xxxx
举个例子
注：
脚本：
xxxx
xxxxx
xxxx


等级一，以此为母板
进一步解释，查询某个数据库的某些内容
模版：
select+内容
from+数据库名称
举个例子
查询所有居民的姓名，性别和身份证号。
注：这里居民是一个数据库主要内容（也是一个列标题，最核心的一个名称），姓名，性别和身份证号是这个名为居民数据库的列标题；数据库名为rkxx
脚本：
select 姓名,性别,身份证号
from rkxx


等级二，升级为了查全部的
进一步解释：查询数据库的所有信息
模版：
select+*
from+要查询的数据库名称
举个例子
查询所有居民的详细信息
注：这里居民是一个数据库的主要内容（也可认为是一个列标题，也可以是关键字）
脚本：
select *
from rkxx

等级三，升级成了自己定义
进一步解释：查询数据库的信息（其中有自己定义内容，列标题中没有体现）
模版：
select+列标题1与列标题2的关系+as+要求自己定义的内容
举个例子
查询所有居民的姓名，身份证号和年龄。
注：这里数据库列表中并没有出现年龄，所以通过函数计算得出。year（）嵌套date（）是现在的时间，减去出生的时间得到的数值就是返回值。
脚本：
select 姓名,身份证号,year(date())-year(出生日期) as 年龄
from rkxx

等级四，升级成了查没有重复的
进一步解释:查询的结果保证单一性，避免重复某个值
模版：
select+distinct+要查询的列标题
from+某个数据库
举个例子
查询所有居民的户号
注：这里有多个居民持有同一个户号，所以需要删掉重复
脚本：
select distinct 户号
from rkxx
再举个例子
查询教师所在系部，重复值仅保留一个
注：这里与分组最大的区别，并没有额外再创一个纵标题，只是对原先的进行了压缩。
脚本：
select distinct 所在系部
from teacher


等级五，升级成了需要进一步筛选的
进一步解释：简单查询已经不能满足要求，要对列标题内部的内容进行更进一步的操作。
模版：
select+要查询的列标题
from+查询内容所在的数据库
where+某一个列标题 = 更加严格的要求
举个例子
查询所有男性居民的姓名，性别和身份证号。
注：这里性别有男有女，列标题内部的内容要用‘’这个标注出来
脚本：
select 姓名,性别,身份证号
from rkxx
where 性别 = ‘男’


等级六，升级成了双重筛选的
进一步解释：对两个列标题进行限制
模版：
select+要查询的列标题
from+查询内容所在的数据库
where+列标题1 = 要求1+and+列标题2 = 要求2
举个例子
查询所有性别为男，户号为001的用户信息
注：这里的因为没有不受限制的列，所以可以在全部列表中筛选，这是第二种写法，这个写法简单
脚本：
select *                  或者   select 性别,户号
from rkxx
where 性别 = ‘男’ and 户号 = ‘001’
再举个例子
查询student表中“18031”班或性别为“女”的同学记录
注：这里多重条件一般使用逻辑运算符进行连接
select *
from teacher
where 班级 = ‘18031’ or 性别 = ‘女’



等级七，升级成了筛选条件带有关联的
进一步解释：引入了其他逻辑符（or），不再是单纯的互相独立关系
模版：
select+要查询的列标题
from+内容所在的数据库
where+（列标题1 = 要求1+or+列标题1 = 要求2） and 列标题2 = 要求3
举个例子
查询所有籍贯在北京市或浙江省的女性居民信息
注：这里or的运算级别落后于and
select *
from rkxx
where （籍贯 = ‘北京市’ or 籍贯 = ‘浙江省’） and 性别 = ‘女’


等级八，升级成了引入通配符
进一步解释：通过引入通配符对列标题的进一步查询的灵活度大大加强
模版：
select+要查询的列标题
from+内容所在的数据库
where+列标题1+like+‘通配符和数据’
举个例子
查询所有姓‘王’的居民的姓名和身份证号
注：这里运用了通配符*对姓名进一步限制
脚本：
select 姓名,身份证号
from rkxx
where 姓名 like ‘王*’


等级九，升级成了引入两个通配符
进一步解释：通过两个通配符，对要查询的内容进一步界定
模版：
select+要查询的列标题
from+内容所在的数据库
where+列标题1+like+‘通配符1+数据+通配符2’
例子一
查询所有姓‘张’或‘王’居民的姓名和身份证号
注：这里一般都是用like去引用通配符
脚本：
select 姓名,身份证号
from rkxx
where 姓名 like ‘[张王]*’
例子二
查询所有既不姓‘张’又不姓‘王’的居民的性别和身份证号
注：这是另一个通配符
脚本：
select 姓名,身份证号
from rkxx
where 姓名 like '[！张王]*'


等级十，升级成了对列标题内的内容做一些其他操作（排序）
进一步解释：不再是单纯的筛选了。
模版
select+要查询的列标题
from+内容所在的数据库
order by+需要特定操作的列标题
举个例子
查询所有居民的姓名，身份证号和出生日期，并按出生日期升序排序
注：这里不做要求的话默认升序排序
select 姓名,身份证号,出生日期
from rkxx
order by 出生日期


等级十一，升级成了对多个列标题内的内容做一些其他操作（排序）
进一步解释：这个对内容的操作有优先级
模版
select+要查询的列标题
from+内容所在的数据库
order by+列标题1+要求1+列标题2+要求2  如果升序，再后面加上desc进行限制
举个例子
查询所有1975年以前出生的居民姓名、用户、出生日期，并按户号升序排序，户号相同按年龄从小到大排序
注：这里是一层筛选，两层对内部内容进行操作
脚本：
select 姓名,户号,出生日期
from rkxx
where 出生日期 < # 1975/01/01 #
order by 户号，出生日期 desc                                                               这个有问题！！！！！！！！
再举个例子
以“课程号”升序，“成绩”降序查询score表的所有记录
注：这里desc是降序，asc是升序
脚本：
select 课程号，成绩
from teacher
order by 课程号 asc,成绩 desc


等级十二，升级成了将相同的合并为一组，并且是分组显示。
进一步解释：不再是只显示一个，而是依据这个分组，比不分组更加清晰的呈现，而且在每组前面会标注还会显示每组相同的个数。
模版:
select+要整合的列标题.count(*)+as+对整合后自动显示的数值命名 
from+内容所在的数据库
group by+要整合的列标题
举个例子
户号相同为一组，统计每户家庭的户号人数
注：整合有会额外多出一个列标题，这是与distinct这个方法最大的不同
脚本：
select 户号.count(*) as 人数
from rkxx 
group by 户号


等级十三，升级成了利用函数锁定列标题内容的特殊值
进一步解释：锁定了特殊值，再进一步命名，实现的特殊点查询
模版：
select+函数名（列标题）+as+对这个特殊值命名 ，avg（列标题）+as+对这个特殊值命名
from+内容所在的数据库
例子一
查询年龄最大和年龄最小居民的出生日期
注：这个只需要对列标题的进行意义转化，当然也可以先定义出年龄
脚本：
select min（出生日期） as 年龄最大，max（出生日期） as 年龄最小
from rkxx
例子二
统计各地居民的平均年龄
注：这里明确用到这个年龄的值，所以要表示出来，不能偷懒
脚本：
select avg（year（date（））-year（出生日期）） as 平均年龄，家庭住址.count(*)                     这里原脚本也有问题！！！！！！！！！
from rkxx
group by 家庭住址


等级十四，升级了对分组筛选
进一步解释：嵌套不断精细才是考核常态，概念越来越凭感觉串联，万事万物的联系利用越来越自动化。
模版：
select+要整合的列标题.count（*）+as+对整合后自动显示的数值命名
from+内容所在的数据库
group by+要整合的列标题+having count（*）+对数值限制的表达式
举一个例子
统计总人数不少于2的户籍所在地。
注：这里列标题没有的就是隐含自己定义的，每一行各个属性联系，这里自带关联。
脚本：
select 户籍.count（*） as 人数
from rkxx
group by 户籍 having count（*）>= 2


等级十五，升级了多个数据库进行关联
进一步解释：这个利用了数据库之间存在相同的内容进行关联，此限制可以利用隐藏数据。
select+数据库1.要利用的列标题1,数据库2.要利用的列标题2
from+要查询的数据库1，要查询的数据库2
数据库1.要利用的列标题 = 数据库2.要利用的列标题
举一个例子
列出住址为北京市的居民的姓名、住址及其汽车的车牌号码
注：这里的汽车的车牌号码存在于另一个数据库中
脚本：
select rkxx.住址,rkxx.姓名,js.车牌号码
from rkxx,js
where 住址 = ‘北京’ and rkxx.身份证号 = js.驾驶证号


彩蛋
查询的一般结构,随机搭配
select ....
from ....
where ....
order by .....
group ......
